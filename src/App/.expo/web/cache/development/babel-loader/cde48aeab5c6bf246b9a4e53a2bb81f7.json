{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/kevin/Downloads/bobapp/src/screens/ScanScreen.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nvar styles = StyleSheet.create({\n  loginScreenButton: {\n    marginRight: 40,\n    marginLeft: 40,\n    marginTop: 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    backgroundColor: '#61dbfb',\n    borderRadius: 10,\n    borderWidth: 1,\n    borderColor: '#fff'\n  },\n  loginText: {\n    color: '#fff',\n    textAlign: 'center',\n    paddingLeft: 10,\n    paddingRight: 10\n  }\n});\nexport default function ScanScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    alert(\"Bar code with type \" + type + \" and data \" + data + \" has been scanned!\");\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), scanned && React.createElement(TouchableOpacity, {\n    style: styles.loginScreenButton,\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    underlayColor: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 19\n    }\n  }, React.createElement(Text, {\n    style: styles.loginText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }\n  }, \"Scan Again\")));\n}","map":{"version":3,"sources":["/home/kevin/Downloads/bobapp/src/screens/ScanScreen.js"],"names":["React","useState","useEffect","BarCodeScanner","styles","StyleSheet","create","loginScreenButton","marginRight","marginLeft","marginTop","paddingTop","paddingBottom","backgroundColor","borderRadius","borderWidth","borderColor","loginText","color","textAlign","paddingLeft","paddingRight","ScanScreen","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","alert","flex","justifyContent","alignItems","undefined","absoluteFillObject"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button, TouchableOpacity } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\n\nconst styles = StyleSheet.create({\n  loginScreenButton:{\n    marginRight:40,\n    marginLeft:40,\n   marginTop:10,\n    paddingTop:10,\n    paddingBottom:10,\n    backgroundColor:'#61dbfb',\n    borderRadius:10,\n    borderWidth: 1,\n    borderColor: '#fff'\n  },\n  loginText:{\n      color:'#fff',\n      textAlign:'center',\n      paddingLeft : 10,\n      paddingRight : 10\n  }\n});\n\nexport default function ScanScreen() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n    <View style={{\n        flex:1,\n        justifyContent: 'center',\n        alignItems: 'center'\n    }}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n      {scanned && <TouchableOpacity\n                        style={styles.loginScreenButton}\n                        onPress={() => setScanned(false)}\n                        underlayColor='#fff'>\n                        <Text style={styles.loginText}>Scan Again</Text>\n                </TouchableOpacity>}\n      {/* {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />} */}\n    </View>\n  );\n}\n\n\n\n// AppRegistry.registerComponent('default', () => ScanScreen);"]},"metadata":{},"sourceType":"module"}